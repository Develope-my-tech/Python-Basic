'''
## World Wide Web ##
- HTTP : 요청과 응답을 교환하기 위한 웹 서버와 클라이언트의 명세
- HTML : 결과에 대한 표현 형식
- URL : 고유의 해당 서버와 자원을 나타내는 방법
:: 웹 클라이언트는 HTTP로 URL을 요청하고, 서버로부터 HTML을 받음

대부분의 컴퓨터 언어는 웹 클아이언트와 웹서버 작성에 사용
동적 언어인 펄, PHP, 루비가 특히 많이 사용
'''

'''
###     웹 클라이언트     ###
- low-level의 전송 제어 프로토콜/인터넷 프로토콜이라 부름
- TCP/IP라고 함
- HTTP : 웹 데이터를 교환하는 표준 프로토콜

* 웹은 클라이언트-서버 시스템이다.
- 클라이언트는 서버에 대한 요청을 만들고,
- 요청은 TCP/IP 커넥션을 열고,
- HTTP를 통해 URL과 다른 정보를 보낸다.

* HTTP
- cashing : 변하지 않는 원격 콘텐츠는 웹 클라이언트에 저장하고, 다시 서버로부터 이 콘텐츠의 다운로드를 피하기 위해 
저장된 콘텐츠의 다운로드를 피하기 위해 저장된 콘텐츠를 사용한다.
- session :  쇼핑 웹사이트는 쇼핑 카트(장바구니)의 콘텐츠를 기억해야한다.
- authetication : 아이디와 비번을 요구하는 사이트는 사용자가 로그인할 때, 이 둘을 기억하여 사용자 식별

HTTP의 중요한 점은 "무상태(stateless)"라는 것이다.
웹 브라우저에서 생성된 각 HTTP 커넥션은 모두 독립적이다.
무상태에 대한 해결책 중 쿠키(cookie)가 있다. 
서버가 클라이언트를 식별할 수 있도록 보내는 특정 정보를 쿠키라고 한다.

###     비파이썬 웹 서버       ###
- 아파치(apache)와 mod_wsgi
- 엔진엑스(nginx)와 uWSGI 앱 서버
:: 아파치가 가장 인기가 많고, 엔진엑스는 안정성과 메모리를 적게 사용

###     기타 프레임워크        ###
- 장고(django)
- web2py
- pyramid
- turbogears
- wheezy.web

###     기타 파있너 웹서버      ###
* 동시 요청 처리를 위한 멀티 프로세스와 스레드를 사용하는 아파치 & 엔진엑스처럼 독립적인 파이썬 기반의 WSGI 서버
- uwsgi
- cherrypy
- pylons

* 이벤트 기반의 서비스 : 싱글 프로세스지만, 하나의 요청에 대한 블로킹을 피함.
- tornado
- gevent
- gunicorn


'''


